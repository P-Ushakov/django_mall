# Generated by Django 2.1.5 on 2019-01-27 13:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MlGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'группа объекта',
                'verbose_name_plural': 'группы объектов',
            },
        ),
        migrations.CreateModel(
            name='MlObjAddedDocs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj_doc', models.FileField(upload_to='')),
                ('doc_teg', models.CharField(blank=True, max_length=255)),
                ('doc_description', models.TextField(blank=True, verbose_name='Описание документа')),
            ],
            options={
                'verbose_name': 'приложенный документ',
                'verbose_name_plural': 'приложенные документы',
            },
        ),
        migrations.CreateModel(
            name='MlObjControlledParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upper_value', models.DecimalField(decimal_places=3, max_digits=12)),
                ('lower_value', models.DecimalField(decimal_places=3, max_digits=12)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'параметр объекта (ключ)',
                'verbose_name_plural': 'параметры объектов (ключи)',
            },
        ),
        migrations.CreateModel(
            name='MlObjControlledParamKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('units', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'общий контроллируемый параметр',
                'verbose_name_plural': 'общие контроллируемые параметры',
            },
        ),
        migrations.CreateModel(
            name='MlObjCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'счетчик',
                'verbose_name_plural': 'счетчики',
            },
        ),
        migrations.CreateModel(
            name='MlObjCounterParamKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('units', models.CharField(max_length=255)),
                ('upp_expense_cat', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'тип счетчика по параметру учета',
                'verbose_name_plural': 'типы счетчиков по параметрам учета',
            },
        ),
        migrations.CreateModel(
            name='MlObjCounterValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_date', models.DateTimeField()),
                ('old_value', models.DecimalField(decimal_places=3, max_digits=12)),
                ('new_date', models.DateTimeField()),
                ('new_value', models.DecimalField(decimal_places=3, max_digits=12)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('ml_obj_counter_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjCounter')),
            ],
            options={
                'verbose_name': 'показания счетчика',
                'verbose_name_plural': 'показания счетчиков',
            },
        ),
        migrations.CreateModel(
            name='MlObjDisposer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'распорядитель объекта',
                'verbose_name_plural': 'распорядители объектов',
            },
        ),
        migrations.CreateModel(
            name='MlObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('obj_upp_expense_cat', models.CharField(blank=True, max_length=255)),
                ('obj_location', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created', models.DateTimeField(blank=True)),
                ('obj_disposer_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mall.MlObjDisposer')),
                ('obj_groups', models.ManyToManyField(blank=True, to='mall.MlGroup')),
                ('obj_parents', models.ManyToManyField(blank=True, related_name='_mlobject_obj_parents_+', to='mall.MlObject')),
            ],
            options={
                'verbose_name': 'объект',
                'verbose_name_plural': 'объекты',
            },
        ),
        migrations.CreateModel(
            name='MlObjectControlledParamValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField()),
                ('value', models.DecimalField(decimal_places=3, max_digits=12)),
                ('if_error', models.BooleanField(blank=True)),
                ('error_code', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание ошибки')),
                ('ml_obj_controlled_param_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjControlledParam')),
            ],
            options={
                'verbose_name': 'параметр объекта (значение)',
                'verbose_name_plural': 'параметры объектов (значения)',
            },
        ),
        migrations.CreateModel(
            name='MlObjPassportData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ml_object_passport_key_value', models.CharField(max_length=50)),
                ('ml_object_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject')),
            ],
            options={
                'verbose_name': 'пасспорт объекта (значение)',
                'verbose_name_plural': 'пасспорт объекта (значения)',
            },
        ),
        migrations.CreateModel(
            name='MlObjPassportKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('units', models.CharField(blank=True, max_length=255)),
                ('can_be_grouped', models.BooleanField(blank=True)),
            ],
            options={
                'verbose_name': 'пасспорт объекта (ключ)',
                'verbose_name_plural': 'пасспорт объекта (ключи)',
            },
        ),
        migrations.CreateModel(
            name='MlObjReglament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='MlObjServiceBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(max_length=255)),
                ('service_group', models.CharField(max_length=255)),
                ('time_of_completion_or_cancellation', models.DateTimeField()),
                ('date_of_issue', models.DateTimeField()),
                ('should_be_done_before', models.DateTimeField()),
                ('priority', models.SmallIntegerField(default=0)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('task_creator', models.CharField(blank=True, max_length=255)),
                ('operational_description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_completed', models.BooleanField(default=True)),
                ('accept_task_trigger', models.DateTimeField()),
                ('start_task_trigger', models.DateTimeField()),
                ('task_person', models.CharField(max_length=255)),
                ('ml_object_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject')),
            ],
        ),
        migrations.CreateModel(
            name='MlObjServiceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('ml_object_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject')),
            ],
        ),
        migrations.CreateModel(
            name='MlObjServiceWork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='MlObjStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_code', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'статус объекта',
                'verbose_name_plural': 'статусы объектов',
            },
        ),
        migrations.CreateModel(
            name='MlObjTaskBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(max_length=255)),
                ('service_group', models.CharField(max_length=255)),
                ('date_of_issue', models.DateTimeField()),
                ('should_be_done_before', models.DateTimeField()),
                ('priority', models.SmallIntegerField(default=0)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('task_creator', models.CharField(blank=True, max_length=255)),
                ('accept_task_trigger', models.DateTimeField()),
                ('start_task_trigger', models.DateTimeField()),
                ('task_person', models.CharField(max_length=255)),
                ('ml_object_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject')),
            ],
        ),
        migrations.CreateModel(
            name='MlServiceFreqType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('can_be_shifted_on', models.IntegerField(default=0)),
                ('time_in_years_between_service', models.IntegerField(default=0)),
                ('time_in_quarters_between_service', models.IntegerField(blank=True)),
                ('time_in_seasons_between_service', models.IntegerField(blank=True)),
                ('time_in_months_between_service', models.IntegerField(blank=True)),
                ('time_in_weeks_between_service', models.IntegerField(blank=True)),
                ('time_in_days_between_service', models.IntegerField(blank=True)),
                ('time_in_hours_between_service', models.IntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MlServiceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Наименование')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'группа сервисного обслуживания',
                'verbose_name_plural': 'группы сервисного обслуживания',
            },
        ),
        migrations.CreateModel(
            name='MlServiceList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('job_code', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
        ),
        migrations.CreateModel(
            name='MlTriggeredEventBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=255)),
                ('event_description', models.TextField(blank=True, verbose_name='Описпние события')),
                ('list_of_triggered_service_works', models.ManyToManyField(to='mall.MlObjServiceWork')),
            ],
        ),
        migrations.AddField(
            model_name='mlobjservicework',
            name='ml_obj_service_group_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlServiceGroup'),
        ),
        migrations.AddField(
            model_name='mlobjservicework',
            name='ml_service_list_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlServiceList'),
        ),
        migrations.AddField(
            model_name='mlobjservicegroup',
            name='ml_service_group_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlServiceGroup'),
        ),
        migrations.AddField(
            model_name='mlobjreglament',
            name='freq_type_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlServiceFreqType'),
        ),
        migrations.AddField(
            model_name='mlobjreglament',
            name='ml_obj_service_work_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjServiceWork'),
        ),
        migrations.AddField(
            model_name='mlobjpassportdata',
            name='ml_object_passport_key_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjPassportKey'),
        ),
        migrations.AddField(
            model_name='mlobject',
            name='obj_status_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mall.MlObjStatus'),
        ),
        migrations.AddField(
            model_name='mlobjcounter',
            name='ml_obj_counter_param_key_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjCounterParamKey'),
        ),
        migrations.AddField(
            model_name='mlobjcounter',
            name='ml_object_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject'),
        ),
        migrations.AddField(
            model_name='mlobjcontrolledparam',
            name='ml_obj_controlled_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObjControlledParamKey'),
        ),
        migrations.AddField(
            model_name='mlobjcontrolledparam',
            name='ml_object_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject'),
        ),
        migrations.AddField(
            model_name='mlobjaddeddocs',
            name='ml_object_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mall.MlObject'),
        ),
    ]
